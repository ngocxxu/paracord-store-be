// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  firstName       String?
  lastName        String?
  phone           String?
  avatar          String?
  role            UserRole  @default(CUSTOMER)
  isActive        Boolean   @default(true)
  supabaseUserId  String?   @unique // For Supabase integration
  addresses       Address[]
  orders          Order[]
  cartItems       CartItem[]
  reviews         Review[]
  wishlistItems   WishlistItem[]
  notifications   Notification[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

model Address {
  id          Int     @id @default(autoincrement())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        AddressType @default(HOME)
  street      String
  ward        String
  district    String
  city        String
  province    String
  postalCode  String?
  isDefault   Boolean @default(false)
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AddressType {
  HOME
  OFFICE
  OTHER
}

// Existing models with updates
model Passenger {
  id        Int    @id @default(autoincrement())
  firstName String @unique
  lastName  String
}

model Product {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  slug          String            @unique
  description   String?
  shortDesc     String?
  price         Float
  salePrice     Float?
  stock         Int               @default(0)
  sku           String?           @unique
  mainImage     String            @default("https://picsum.photos/400/500")
  images        ProductImage[]
  attributes    ProductAttribute?
  categoryId    Int?
  category      Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags          ProductTag[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  isActive      Boolean           @default(true)
  isFeatured    Boolean           @default(false)
  viewCount     Int               @default(0)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model ProductAttribute {
  id        Int     @id @default(autoincrement())
  material  String
  brand     String
  origin    String?
  sizes     Json? // For bracelet: ["S", "M", "L"]
  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  alt       String?
  sortOrder Int     @default(0)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    Int?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Tags
model Tag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  slug        String       @unique
  color       String?      @default("#3B82F6")
  products    ProductTag[]
  createdAt   DateTime     @default(now())
}

model ProductTag {
  productId Int
  tagId     Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
}

// Shopping Cart
model CartItem {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  price     Float   // Price at the time of addition
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// Wishlist
model WishlistItem {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// Orders
model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  
  // Shipping info
  shippingAddressId Int?
  shippingAddress   Address? @relation(fields: [shippingAddressId], references: [id])
  shippingFee       Float    @default(0)
  shippingMethod    String?
  
  // Pricing
  subtotal        Float
  taxAmount       Float    @default(0)
  discountAmount  Float    @default(0)
  totalAmount     Float
  
  // Tracking
  trackingNumber  String?
  estimatedDelivery DateTime?
  deliveredAt     DateTime?
  
  // Items and payments
  items           OrderItem[]
  payments        Payment[]
  
  // Metadata
  notes           String?
  cancelReason    String?
  cancelledAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  BANK_TRANSFER
  CREDIT_CARD
  PAYPAL
  MOMO
  ZALOPAY
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float   // Price at the time of order
  total     Float   // price * quantity
  createdAt DateTime @default(now())
}

// Payments
model Payment {
  id              String        @id @default(uuid())
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?       @unique
  gatewayResponse Json?         // Response from payment gateway
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Reviews
model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  images    String[] // Array of image URLs
  isVerified Boolean @default(false) // Verified purchase
  isApproved Boolean @default(false) // Admin approved
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// Coupons & Discounts
model Coupon {
  id              Int         @id @default(autoincrement())
  code            String      @unique
  name            String
  description     String?
  type            CouponType
  value           Float       // Percentage or fixed amount
  minOrderAmount  Float?      // Minimum order to apply
  maxDiscount     Float?      // Maximum discount amount
  usageLimit      Int?        // Total usage limit
  usageCount      Int         @default(0)
  userUsageLimit  Int?        // Per user usage limit
  isActive        Boolean     @default(true)
  startsAt        DateTime?
  expiresAt       DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

// Settings
model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  group     String?  // general, payment, shipping, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Notifications
model Notification {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean  @default(false)
  data      Json?    // Additional data
  createdAt DateTime @default(now())
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ORDER_UPDATE
  PROMOTION
}